{"version":3,"sources":["hooks/useLocalStorage.tsx","contexts/ContactsContext.tsx","contexts/SocketProvider.tsx","contexts/ConversationsProvider.tsx","components/Conversations.tsx","components/Contacts.tsx","components/NewConversationModal.tsx","components/NewContactModal.tsx","components/Sidebar.tsx","components/OpenConversation.tsx","components/Dashboard.tsx","components/Login.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","contacts","createContact","useContacts","useContext","ContactsProvider","children","setContacts","Provider","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","madeChange","newMessage","newConversation","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","selectConversationIndex","createConversation","prevConversations","sendMessage","emit","Conversations","ListGroup","variant","Item","action","onClick","active","join","Contacts","NewConversationModal","closeModal","selectedContactIds","setSelectedContactIds","Modal","Header","closeButton","Body","Form","onSubmit","e","preventDefault","Group","controlId","Check","type","label","checked","includes","onChange","contactId","prevSelectedContactIds","filter","prevId","Button","NewContactModal","idRef","useRef","nameRef","current","Label","Control","ref","required","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","conversationOpen","modalOpen","setModalOpen","style","width","className","Tab","Container","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","OpenConversation","setRef","node","scrollIntoView","smooth","setText","lastMessage","InputGroup","as","target","height","resize","Append","Dashboard","Login","onIdSubmit","v4","App","setId","dashboard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bd5d9e4.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\"\r\n\r\n\r\nconst PREFIX = \"chatapp-\"\r\n\r\nexport function useLocalStorage(key: string, initialValue?: any) {\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if (jsonValue !== null) return JSON.parse(jsonValue)\r\n        if (typeof initialValue === \"function\") {\r\n            return initialValue()\r\n        } else {\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useContext} from 'react';\r\nimport {useLocalStorage} from \"../hooks/useLocalStorage\";\r\nimport {ContactType} from \"../types/types\";\r\n\r\n\r\nconst ContactsContext = React\r\n    .createContext<{ contacts: Array<ContactType>; createContact: (id: string, name: string) => void; }>({contacts: [], createContact(){}})\r\n\r\nexport function useContacts() {\r\n    return useContext(ContactsContext)\r\n}\r\n\r\nexport const ContactsProvider: React.FC = ({children}) => {\r\n\r\n    const [contacts,setContacts] = useLocalStorage(\"contacts\", [])\r\n\r\n    function createContact(id: string, name: string) {\r\n        setContacts((prevContacts: Array<ContactType>) => {\r\n            return [...prevContacts, {id, name}]\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ContactsContext.Provider value={{contacts, createContact}}>\r\n            {children}\r\n        </ContactsContext.Provider>\r\n    );\r\n};\r\n\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {io, Socket} from \"socket.io-client\";\r\n\r\nconst SocketContext = React.createContext({} as Socket)\r\n\r\n\r\nexport const useSocket = () => {\r\n    return useContext(SocketContext)\r\n}\r\n\r\n\r\nexport const SocketProvider: React.FC<{id: string}> = ({id, children}) => {\r\n\r\n    const [socket, setSocket] = useState<any>()\r\n\r\n    useEffect(() => {\r\n        const newSocket = io(\"https://chati-server-socketio.herokuapp.com\", {query: {id}})\r\n\r\n        setSocket(newSocket)\r\n\r\n        return () => {\r\n            newSocket.close()\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <SocketContext.Provider value={socket}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n};\r\n","import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport {useLocalStorage} from \"../hooks/useLocalStorage\";\r\nimport {ConversationType, FormattedConversationType} from \"../types/types\";\r\nimport {useContacts} from \"./ContactsContext\";\r\nimport {useSocket} from \"./SocketProvider\";\r\n\r\n\r\ntype initialValueType = {\r\n    conversations: Array<ConversationType>\r\n    createConversation: (recipients: Array<string>) => void\r\n    selectedConversation: FormattedConversationType\r\n    selectConversationIndex: (index: number) => void\r\n    sendMessage: (recipients: Array<string>, text: string) => void\r\n}\r\n\r\nconst ConversationsContext = React\r\n    .createContext<initialValueType>({} as initialValueType)\r\n\r\nexport function useConversations() {\r\n    return useContext(ConversationsContext)\r\n}\r\n\r\ntype ConversationsProviderPropsType = {\r\n    id: string\r\n}\r\n\r\nexport const ConversationsProvider: React.FC<ConversationsProviderPropsType> = ({id, children}) => {\r\n\r\n    const [conversations, setConversations] = useLocalStorage(\"conversations\", [])\r\n    const {contacts} = useContacts()\r\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n    const socket = useSocket()\r\n\r\n    function createConversation(recipients: Array<string>) {\r\n        setConversations((prevConversations: Array<{ id: string, name: string }>) => {\r\n            return [...prevConversations, {recipients, messages: []}]\r\n        })\r\n    }\r\n\r\n    const addMessageToConversation = useCallback(\r\n        ({recipients, text, sender}: { recipients: Array<string>, text: string, sender: string }) => {\r\n            setConversations((conversations: Array<ConversationType>) => {\r\n                let madeChange = false\r\n                const newMessage = {sender, text}\r\n                const newConversation = conversations.map((conversation: ConversationType) => {\r\n                    if (arrayEquality(conversation.recipients, recipients)) {\r\n                        madeChange = true\r\n                        return {\r\n                            ...conversation, messages: [...conversation.messages, newMessage]\r\n                        }\r\n                    }\r\n                    return conversation\r\n                })\r\n\r\n\r\n                if (madeChange) {\r\n                    return newConversation\r\n                } else {\r\n                    return [...conversations, {recipients, messages: [newMessage]}]\r\n                }\r\n            })\r\n        }, [setConversations])\r\n\r\n    useEffect(() => {\r\n        if (socket == null) return\r\n\r\n        socket.on(\"receive-message\", addMessageToConversation)\r\n\r\n        return () => {\r\n            socket.off(\"receive-message\")\r\n        }\r\n    }, [socket, addMessageToConversation])\r\n\r\n    function sendMessage(recipients: Array<string>, text: string) {\r\n\r\n        socket.emit(\"send-message\", {recipients, text})\r\n\r\n        addMessageToConversation({recipients, text, sender: id})\r\n    }\r\n\r\n    const formattedConversations = conversations.map((conversation: ConversationType, index: number) => {\r\n        const recipients = conversation.recipients.map(recipient => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient.id\r\n            })\r\n            const name = (contact && contact.name) || recipient\r\n            return {id: recipient, name}\r\n        })\r\n        const messages = conversation.messages.map(message => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === message.sender\r\n            })\r\n            const name = (contact && contact.name) || message.sender\r\n            const fromMe = id === message.sender\r\n            return {...message, senderName: name, fromMe}\r\n        })\r\n        const selected = index === selectedConversationIndex\r\n\r\n        return {...conversation, messages, recipients, selected}\r\n    })\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        selectedConversation: formattedConversations[selectedConversationIndex],\r\n        selectConversationIndex: setSelectedConversationIndex,\r\n        createConversation,\r\n        sendMessage\r\n    }\r\n\r\n    return (\r\n        <ConversationsContext.Provider value={value}>\r\n            {children}\r\n        </ConversationsContext.Provider>);\r\n};\r\n\r\n\r\nfunction arrayEquality(a: Array<any>, b: Array<any>) {\r\n    if (a.length !== b.length) return false\r\n\r\n    a.sort()\r\n    b.sort()\r\n\r\n    return a.every((element, index) => {\r\n        return element === b[index]\r\n    })\r\n}\r\n","import React from 'react';\r\nimport {ListGroup} from \"react-bootstrap\";\r\nimport {useConversations} from \"../contexts/ConversationsProvider\";\r\n\r\nconst Conversations = () => {\r\n\r\n    const {conversations, selectConversationIndex} = useConversations()\r\n\r\n    return (\r\n        <ListGroup variant={\"flush\"}>\r\n            {conversations.map((conversation, index)=> {\r\n                return <ListGroup.Item\r\n                    key={index}\r\n                    action\r\n                    onClick={() => selectConversationIndex(index)}\r\n                    active={conversation.selected}\r\n                >\r\n                    {conversation.recipients.map(recipient => recipient.name).join(\", \")}\r\n                </ListGroup.Item>\r\n            })}\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default Conversations;\r\n\r\n","import React from 'react';\r\nimport {useContacts} from \"../contexts/ContactsContext\";\r\nimport {ListGroup} from \"react-bootstrap\";\r\n\r\nconst Contacts = () => {\r\n\r\n    const {contacts} = useContacts()\r\n\r\n    return (\r\n        <ListGroup variant={\"flush\"}>\r\n            {contacts.map((contact)=> {\r\n                return <ListGroup.Item key={contact.id}>\r\n                    {contact.name}\r\n                </ListGroup.Item>\r\n            })}\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default Contacts;\r\n","import React, {FormEvent, useState} from 'react';\r\nimport {Button, Form, Modal} from \"react-bootstrap\";\r\nimport {useContacts} from \"../contexts/ContactsContext\";\r\nimport {useConversations} from \"../contexts/ConversationsProvider\";\r\n\r\ntype NewConversationModalPropsType = {\r\n    closeModal: () => void\r\n}\r\n\r\nconst NewConversationModal: React.FC<NewConversationModalPropsType> = ({closeModal}) => {\r\n\r\n    const [selectedContactIds, setSelectedContactIds] = useState<Array<string>>([])\r\n    const {contacts} = useContacts()\r\n    const {createConversation} = useConversations()\r\n\r\n    function handleSubmit(e: FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        createConversation(selectedContactIds)\r\n\r\n        closeModal()\r\n    }\r\n\r\n    function handleCheckboxChange(contactId: string) {\r\n        setSelectedContactIds(prevSelectedContactIds => {\r\n            if (prevSelectedContactIds.includes(contactId)) {\r\n                return prevSelectedContactIds.filter(prevId => {\r\n                    return contactId !== prevId\r\n                })\r\n            } else {\r\n                return  [...prevSelectedContactIds, contactId]\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>Create Contact</Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    {contacts.map(contact => {\r\n                        return <Form.Group controlId={contact.id} key={contact.id}>\r\n                            <Form.Check\r\n                                type={\"checkbox\"}\r\n                                label={contact.name}\r\n                                checked={selectedContactIds.includes(contact.id)}\r\n                                onChange={()=>handleCheckboxChange(contact.id)}\r\n                            />\r\n                        </Form.Group>\r\n                    })}\r\n                    <Button type={\"submit\"}>Create</Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewConversationModal;\r\n","import React, {FormEvent, useRef} from 'react';\r\nimport {Button, Form, Modal} from 'react-bootstrap';\r\nimport {useContacts} from \"../contexts/ContactsContext\";\r\n\r\ntype NewContactModalPropsType = {\r\n    closeModal: () => void\r\n}\r\n\r\nconst NewContactModal: React.FC<NewContactModalPropsType> = ({closeModal}) => {\r\n\r\n    const idRef = useRef<HTMLInputElement>(null)\r\n    const nameRef = useRef<HTMLInputElement>(null)\r\n    const { createContact } = useContacts()\r\n\r\n\r\n    function handleSubmit(e: FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        createContact(idRef.current?.value as string, nameRef.current?.value as string)\r\n\r\n        closeModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>Create Contact</Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Id</Form.Label>\r\n                        <Form.Control type={\"text\"} ref={idRef} required/>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control type={\"text\"} ref={nameRef} required/>\r\n                    </Form.Group>\r\n                    <Button type={\"submit\"}>Create</Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewContactModal;\r\n","import React, {useState} from 'react';\r\nimport {Button, Modal, Nav, Tab} from 'react-bootstrap';\r\nimport Conversations from './Conversations';\r\nimport Contacts from \"./Contacts\";\r\nimport NewConversationModal from './NewConversationModal';\r\nimport NewContactModal from './NewContactModal';\r\n\r\ntype SidebarPropsType = {\r\n    id: string\r\n}\r\n\r\nconst CONVERSATIONS_KEY = \"conversations\"\r\nconst CONTACTS_KEY = \"contacts\"\r\n\r\nconst Sidebar: React.FC<SidebarPropsType> = ({id}) => {\r\n\r\n    const [activeKey, setActiveKey] = useState<string | null>(CONVERSATIONS_KEY)\r\n    const conversationOpen = activeKey === CONVERSATIONS_KEY\r\nconst [modalOpen, setModalOpen] = useState(false)\r\n\r\n    const closeModal = () => {\r\n        setModalOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div style={{width: \"250px\"}} className=\"d-flex flex-column\">\r\n            <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n                <Nav variant={\"tabs\"} className={\"justify-content-center\"}>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey={CONVERSATIONS_KEY}>\r\n                            Conversations\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey={CONTACTS_KEY}>\r\n                            Contacts\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n                <Tab.Content className={\"border-right overflow-auto flex-grow-1\"}>\r\n                    <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n                        <Conversations/>\r\n                    </Tab.Pane>\r\n                    <Tab.Pane eventKey={CONTACTS_KEY}>\r\n                        <Contacts/>\r\n                    </Tab.Pane>\r\n                </Tab.Content>\r\n                <div className={\"p-2 border-top border-right small\"}>\r\n                    Your id: <span className={\"text-muted\"}>{id}</span>\r\n                </div>\r\n                <Button onClick={() => setModalOpen(true)} className={\"rounded-0\"}>\r\n                    New {conversationOpen ? \"Conversation\" : \"Contact\"}\r\n                </Button>\r\n            </Tab.Container>\r\n            <Modal show={modalOpen} onHide={closeModal}>\r\n                {conversationOpen\r\n                    ? <NewConversationModal closeModal={closeModal}/>\r\n                    : <NewContactModal closeModal={closeModal}/>\r\n                }\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, {FormEvent, useCallback, useState} from 'react';\r\nimport {Button, Form, InputGroup} from 'react-bootstrap';\r\nimport {useConversations} from \"../contexts/ConversationsProvider\";\r\n\r\nconst OpenConversation = () => {\r\n\r\n    const { sendMessage, selectedConversation } = useConversations()\r\n    const setRef = useCallback(node => {\r\n        if (node) {\r\n            node.scrollIntoView({ smooth: true })\r\n        }\r\n    }, [])\r\n    const [text, setText] = useState(\"\")\r\n\r\n    function handleSubmit(e: FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        sendMessage(selectedConversation.recipients.map(recipient => recipient.id), text)\r\n\r\n        setText(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className={\"d-flex flex-column flex-grow-1\"}>\r\n            <div className=\"flex-grow-1 overflow-auto\">\r\n                <div className=\"d-flex flex-column align-items-lg-start justify-content-end px-3\">\r\n                    {selectedConversation.messages.map((message, index) => {\r\n\r\n                        const lastMessage = selectedConversation.messages.length - 1 === index\r\n\r\n                        return (\r\n                            <div key={index}\r\n                                 ref={lastMessage ? setRef : null}\r\n                                className={`my-1 d-flex flex-column ${message.fromMe ? \"align-self-end align-items-end\" : \"align-items-start\"}`}\r\n                            >\r\n                                <div className={`rounded px-2 py-1 ${message.fromMe ? \"bg-primary text-white\" : \"border\"}`}>\r\n                                    {message.text}\r\n                                </div>\r\n                                <div className={`text-muted small ${message.fromMe ? \"text-right\" : \"\"}`}>\r\n                                    {message.fromMe ? \"You\" : message.senderName}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group className=\"m-2\">\r\n                    <InputGroup>\r\n                        <Form.Control as=\"textarea\"\r\n                                      required\r\n                                      value={text}\r\n                                      onChange={(e => setText(e.target.value))}\r\n                                      style={{height: \"75px\", resize: \"none\"}}\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button type=\"submit\">Send</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OpenConversation;\r\n","import React from 'react';\r\nimport Sidebar from \"./Sidebar\";\r\nimport OpenConversation from \"./OpenConversation\";\r\nimport {useConversations} from \"../contexts/ConversationsProvider\";\r\n\r\ntype DashboardPropsType = {\r\n    id: string\r\n}\r\n\r\nconst Dashboard: React.FC<DashboardPropsType> = ({id}) => {\r\n\r\n    const { selectedConversation } = useConversations()\r\n\r\n    return (\r\n        <div className={\"d-flex\"} style={{height: \"100vh\"}}>\r\n            <Sidebar id={id}/>\r\n            {selectedConversation&&<OpenConversation/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, {FormEvent, useRef} from 'react';\r\nimport {Button, Container, Form} from \"react-bootstrap\";\r\nimport { v4 } from 'uuid';\r\n\r\ntype LoginPropsType = {\r\n    onIdSubmit: (id: string) => void\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({onIdSubmit}) => {\r\n\r\n\r\n\r\n    const idRef = useRef<HTMLInputElement>(null);\r\n\r\n    function handleSubmit(e: FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n\r\n        onIdSubmit(idRef.current?.value as string)\r\n    }\r\n\r\n    function createNewId() {\r\n        onIdSubmit(v4())\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className=\"align-items-center d-flex\" style={{height: \"100vh\"}}>\r\n            <Form onSubmit={handleSubmit} className=\"w-100\">\r\n                <Form.Group>\r\n                    <Form.Label>Enter your ID</Form.Label>\r\n                    <Form.Control type={\"text\"} ref={idRef} required/>\r\n                </Form.Group>\r\n                <Button type={\"submit\"} className=\"mr-2\">Login</Button>\r\n                <Button variant={\"secondary\"} onClick={createNewId}>Create A New Id</Button>\r\n            </Form>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport '../App.css';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard';\nimport Login from \"./Login\";\nimport {ContactsProvider} from \"../contexts/ContactsContext\";\nimport {ConversationsProvider} from \"../contexts/ConversationsProvider\";\nimport {SocketProvider} from \"../contexts/SocketProvider\";\n\n\nfunction App() {\n\n    const [id, setId] = useLocalStorage(\"id\")\n\n    const dashboard = (\n        <SocketProvider id={id}>\n            <ContactsProvider>\n                <ConversationsProvider id={id}>\n                    <Dashboard id={id}/>\n                </ConversationsProvider>\n            </ContactsProvider>\n        </SocketProvider>\n    )\n\n    return (\n        <>\n            {id ? dashboard : <Login onIdSubmit={setId}/>}\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}